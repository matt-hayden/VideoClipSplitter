#PY  <- Needed to identify #
# -*- coding: utf-8 -*-

### parameters
input_filename = "$input_filename"
input_parts = $parts
input_frames = $frames

filepart = "$output_filepart"
ext = "$output_ext"

video_filters = $video_filters
if video_filters:
	ext = ".MKV"

# this is used if "Copy" isn't possible: (for more details see the next statement)
default_video_codec = [ "x264" ]

# codec settings "fast", for example: (this is unused)
my_codec = [ "x264", \
	"useAdvancedConfiguration=True", \
	"general.params=AQ=14", \
	"general.threads=0", \
	"general.preset=ultrafast", \
	"general.tuning=film", \
	"general.profile=baseline", \
	"general.fast_decode=False", \
	"general.zero_latency=False", \
	"general.fast_first_pass=True", \
	"level=31", \
	"vui.sar_height=1", \
	"vui.sar_width=1", \
	"MaxRefFrames=2", \
	"MinIdr=23", \
	"MaxIdr=250", \
	"i_scenecut_threshold=40", \
	"intra_refresh=False", \
	"MaxBFrame=3", \
	"i_bframe_adaptive=1", \
	"i_bframe_bias=0", \
	"i_bframe_pyramid=2", \
	"b_deblocking_filter=True", \
	"i_deblocking_filter_alphac0=0", \
	"i_deblocking_filter_beta=0", \
	"cabac=True", \
	"interlaced=False", \
	"constrained_intra=False", \
	"tff=True", \
	"fake_interlaced=False", \
	"analyze.b_8x8=True", \
	"analyze.b_i4x4=True", \
	"analyze.b_i8x8=True", \
	"analyze.b_p8x8=False", \
	"analyze.b_p16x16=True", \
	"analyze.b_b16x16=True", \
	"analyze.weighted_pred=1", \
	"analyze.weighted_bipred=True" , "analyze.direct_mv_pred=1", \
	"analyze.chroma_offset=0", \
	"analyze.me_method=1", \
	"analyze.me_range=16", \
	"analyze.mv_range=-1", \
	"analyze.mv_range_thread=-1", \
	"analyze.subpel_refine=6", \
	"analyze.chroma_me=True" , "analyze.mixed_references=True", \
	"analyze.trellis=1", \
	"analyze.psy_rd=1.000000", \
	"analyze.psy_trellis=0.000000", \
	"analyze.fast_pskip=True", \
	"analyze.dct_decimate=True", \
	"analyze.noise_reduction=0", \
	"analyze.psy=True" , "analyze.intra_luma=11", \
	"analyze.inter_luma=21", \
	"ratecontrol.rc_method=0", \
	"ratecontrol.qp_constant=0", \
	"ratecontrol.qp_min=0", \
	"ratecontrol.qp_max=69", \
	"ratecontrol.qp_step=4", \
	"ratecontrol.bitrate=0" , "ratecontrol.rate_tolerance=1.000000", \
	"ratecontrol.vbv_max_bitrate=0", \
	"ratecontrol.vbv_buffer_size=0", \
	"ratecontrol.vbv_buffer_init=0", \
	"ratecontrol.ip_factor=1.400000", \
	"ratecontrol.pb_factor=1.300000" , "ratecontrol.aq_mode=1", \
	"ratecontrol.aq_strength=1.000000", \
	"ratecontrol.mb_tree=True", \
	"ratecontrol.lookahead=30" ]
###

# helper functions:
def debug(*args):
	print(' '.join(args))

def progress(label, pa, pb, width=80):
	# 0 <= pa, pb <= 1
	mywidth = width - len(label)
	a = int(mywidth*pa)
	b = int(mywidth*(1.0-pb))
	m = mywidth - a - b
	print(label + " " + '-'*a + '*'*m + '-'*b)
# if run from python:
if __name__ == '__main__':
	class Avidemux:
		pass

adm = Avidemux() # Looks like this has to be a global object
#adm.forceUnpack() # produces KeyError

#
def diag(version=__name__):
	if 'avidemux7' == version:
		debug("FourCC", adm.getFCC())
		if adm.isVopPacked():	debug("\tVOP Packed")
		if adm.hasQpel():		debug("\tQpel")
		if adm.hasGmc():		debug("\tGMC")
#
def setup(container=$container, videoFilters=video_filters):
	### Called after a file is opened
	### Note that video filters are inactive on "copy" codec
	if videoFilters:
		debug("Using default video settings: ", "\n\t".join(default_video_codec))
		adm.videoCodec(*default_video_codec)
		for fargs in videoFilters:
			debug("Appending video filter", fargs)
			adm.addVideoFilter(*fargs)
	else:
		adm.videoCodec("Copy")
	### Audio: only one track supported here
	adm.audioClearTracks()
	#adm.setSourceTrackLanguage(0,"unknown")
	adm.audioAddTrack(0)
	adm.audioCodec(0, "copy")
	adm.audioSetDrc(0, 0)
	adm.audioSetShift(0, 0, 0)
	if container:
		adm.setContainer(*container)
#
def main(input_filename, parts=input_parts, frames=input_frames, fps=None, **kwargs):
	adm.loadVideo(input_filename)
	if not fps:
		Fps1000=adm.getFps1000()
		fps=Fps1000/1000.0
	debug(fps, "frames per second")
	file_begin_time, file_end_time = adm.markerA, adm.markerB # in ns
	file_begin_frame, file_end_frame = int(adm.markerA/Fps1000), int(adm.markerB/Fps1000)
	debug("Video starts at", file_begin_time, "ns and ends at", file_end_time, "ns (", file_end_time/1000/1000/60, "min)")
	debug("Video starts at frame", file_begin_frame, "and ends at frame", file_end_frame)
	debug("Size", adm.getWidth(), "x", adm.getHeight())

	diag()
	setup(**kwargs)

	if len(frames) and not len(parts):
		for el in frames:
			b, e = el # frames
			if b is None:
				#b2 = file_begin_frame
				b2 = file_begin_time
			else:
				b2 = int(b)/fps
			if (e is None) or (file_end_frame < e):
				e2 = int(file_end_frame)/fps
			else:
				e2 = int(e)/fps
			parts.append((b2, e2)) # seconds
	n = 1
	for el in parts:
		b, e = el # seconds
		if b is None:
			b2 = file_begin_time
		else:
			b2 = float(b)*1000*1000
		if e is None:
			e2 = file_end_time
		#elif (file_end_time < e):
		#	e2 = file_end_time
		else:
			e2 = float(e)*1000*1000
		adm.markerA, adm.markerB = b2, e2
		output_filename = filepart+'-'+str(n)+ext
		debug("Cut", n, ":", output_filename)
		debug("Timestamps", b2, '-', e2)
		progress(output_filename, b2/file_end_time, e2/file_end_time)
		adm.save(output_filename)
		n += 1
if __name__ == 'avidemux6':
	main(input_filename)
else:
	### stub if called from python
	import subprocess
	import sys
	exit_code = subprocess.check_call( ['avidemux3_cli', '--run', __file__] )
	if exit_code:
		print('Error', exit_code)
		sys.exit(exit_code)
